import { Injectable, OnModuleInit } from '@nestjs/common';
import { Bot, Context } from 'grammy';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Bot<Context>;

  constructor() {
    if (!process.env.TG_SECRET_KEY) {
      console.error(
        'TG_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª',
      );
      return;
    }

    this.bot = new Bot(process.env.TG_SECRET_KEY);
  }

  async onModuleInit() {
    await this.init();
  }

  private async initHandlers() {
    this.bot.command('start', (ctx) => ctx.reply('–®–æ —Ç—ã –≥–æ–ª–æ–≤–∞'));
    this.bot.on('message', async (ctx) => {
      //   console.log(ctx.message);
      const isNikita = ctx.message.from.username === 'iambelov';
      if (isNikita && ctx.message?.text?.includes('?')) {
        await ctx.reply('–î–∞.', {
          reply_to_message_id: ctx.message.message_id,
        });
      } else if (isNikita && ctx.message.video_note) {
        await ctx.replyWithPoll('–í–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è –∫—Ä—É–∂–æ—á–∫–∏ –ù–∏–∫–∏—Ç—ã?', [
          { text: '–î–∞' },
          { text: '–ù–µ—Ç' },
        ]);
      } else if (isNikita) {
        await ctx.api.setMessageReaction(ctx.chat.id, ctx.message.message_id, [
          { type: 'emoji', emoji: 'ü§°' },
        ]);
      }
    });
  }

  async init() {
    try {
      await this.initHandlers();
      await this.bot.start();
      console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
      throw error;
    }
  }
}
